# on:
#   workflow_call:
#     inputs:
#       gcloud_service_account:
#         required: true
#         type: string
#       gcloud_workload_identity_provider:
#         required: true
#         type: string
#       deploy_name:
#         required: true
#         type: string
#     outputs:
#       git-commit-short-sha:
#         description: "The Git commit short SHA"
#         value: ${{ jobs.test-and-build.outputs.git-commit-short-sha }}
#       container-image-digest:
#         description: "The Docker image digest which uniquely identifies the built image"
#         value: ${{ jobs.test-and-build.outputs.container-image-digest }}

# # On this project, I went with a single "Test & Build" job, since each job
# # gets billed rounded to the next minute, and having multiple separated jobs
# # is not worth it at the beginning of the project.

# # Keep in mind that, if the test suite becomes too big, and test threading is
# # required, or the workflow speed becomes critial, we might need to revert back
# # to separated jobs.

# # Generate a GitHub token that can be exchanged with Google Cloud - see
# # https://github.com/google-github-actions/auth/tree/v0.6.0#setting-up-workload-identity-federation
# permissions:
#   contents: read
#   id-token: write
#   deployments: write

# jobs:
#   test-and-build:
#     name: Test and Build
#     runs-on: ubuntu-latest

#     outputs:
#       git-commit-short-sha: ${{ steps.variables.outputs.git-commit-short-sha }}
#       container-image-digest: ${{ steps.build-and-push-release-image.outputs.digest }}

#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v3.1.0

#       - # We'll generate a unique id that we'll use to identify the build run
#         # on our systems
#         name: Generate UUID for build
#         id: uuidgen
#         run: echo "uuid=$(uuidgen)" >> $GITHUB_OUTPUT

#       - name: Set additional variables
#         id: variables
#         uses: icalia-actions/common-variables@v0.0.3

#       - name: Set build timestamp
#         id: set-build-timestamp
#         run: echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT

#       - name: Set up Docker Buildx
#         id: buildx
#         uses: docker/setup-buildx-action@v2.2.1
#         with:
#           version: v0.9.1

#       - name: Build Test Image
#         id: build-test-image
#         uses: docker/build-push-action@v3.2.0
#         with:
#           load: true
#           target: testing
#           platforms: linux/amd64
#           builder: ${{ steps.buildx.outputs.name }}
#           build-args: |
#             DEVELOPER_UID=${{ steps.variables.outputs.runner-uid }}
#             DEVELOPER_USERNAME=${{ steps.variables.outputs.runner-user }}
#           tags: |
#             icalialabs/workspace-icalialabs-com-backend:testing-${{ steps.variables.outputs.git-dasherized-branch }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max

#       # - name: Prepare test coverage reporting on CodeClimate
#       #   uses: icalia-actions/cc-test-reporter-base@v0.0.2
#       #   env:
#       #     CC_TEST_REPORTER_ID: 93ca870c61da5098101155efb659f6025a044401934062866d42d183a1089f8e
#       #   with:
#       #       command: before-build
#       #       version: "0.10.3"

#       - name: Run tests
#         env:
#           UID: ${{ steps.variables.outputs.runner-uid }}
#           USER: ${{ steps.variables.outputs.runner-user }}
#           TESTING_IMAGE_TAG: ":testing-${{ steps.variables.outputs.git-dasherized-branch }}"
#           CC_TEST_REPORTER_ID: 93ca870c61da5098101155efb659f6025a044401934062866d42d183a1089f8e
#         run: docker compose run --rm tests

#       # - name: Workaround for coverage report to CodeClimate with jq
#       #   if: always()
#       #   run: |
#       #     jq 'map_values(. | map_values(if type=="object" then map_values(.lines) else . end))' coverage/.resultset.json > coverage/.resultset_workaround.json
#       #     diff -uw coverage/.resultset.json coverage/.resultset.json || true
#       #     cat coverage/.resultset_workaround.json > coverage/.resultset.json

#       # - name: Publish test coverage report to CodeClimate
#       #   uses: icalia-actions/cc-test-reporter-base@v0.0.2
#       #   env:
#       #     CC_TEST_REPORTER_ID: 93ca870c61da5098101155efb659f6025a044401934062866d42d183a1089f8e
#       #   with:
#       #       command: after-build --coverage-input-type simplecov --prefix /workspaces/workspace-icalialabs-com-backend
#       #       version: "0.10.3"

#       - name: Archive test logs and screenshots
#         uses: actions/upload-artifact@v3.1.0
#         if: always()
#         with:
#           name: system-spec-screenshots
#           retention-days: 7
#           path: |
#             log/test.log
#             tmp/capybara/screenshots

#       - name: Authenticate to Google Cloud
#         uses: google-github-actions/auth@v0.6.0
#         with:
#           service_account: ${{ inputs.gcloud_service_account }}
#           workload_identity_provider: ${{ inputs.gcloud_workload_identity_provider }}

#       - name: Set up Google Cloud SDK
#         uses: google-github-actions/setup-gcloud@v0.6.0

#       - name: Authorize push to Google Cloud Artifact Registry
#         run: gcloud auth configure-docker us-central1-docker.pkg.dev

#       - name: Build & Push Release Image
#         id: build-and-push-release-image
#         uses: docker/build-push-action@v3.2.0
#         with:
#           push: true
#           target: release
#           platforms: linux/amd64
#           builder: ${{ steps.buildx.outputs.name }}
#           build-args: |
#             DEVELOPER_UID=${{ steps.variables.outputs.runner-uid }}
#             DEVELOPER_USERNAME=${{ steps.variables.outputs.runner-user }}
#           tags: |
#             us-central1-docker.pkg.dev/icalialabs-${{ inputs.deploy_name }}/app/workspace-icalialabs-com-backend:${{ steps.variables.outputs.git-commit-short-sha }}
#             us-central1-docker.pkg.dev/icalialabs-${{ inputs.deploy_name }}/app/workspace-icalialabs-com-backend:${{ steps.variables.outputs.git-dasherized-branch }}
#             us-central1-docker.pkg.dev/icalialabs-${{ inputs.deploy_name }}/app/workspace-icalialabs-com-backend:latest
#           cache-from: type=gha
#           cache-to: type=gha,mode=max
